// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A basic math library.
 */
class Math {
	static int two_to_the;
    /** Initializes the library. */
    function void init(){
		let two_to_the = Array.new(16);
		let two_to_the[0] = 1;
		let two_to_the[1] = 2;
		let two_to_the[2] = 4;
		let two_to_the[3] = 8;
		let two_to_the[4] = 16;
		let two_to_the[5] = 32;
		let two_to_the[6] = 64;
		let two_to_the[7] = 128;
		let two_to_the[8] = 256;
		let two_to_the[9] = 512;
		let two_to_the[10] = 1024;
		let two_to_the[11] = 2048;
		let two_to_the[12] = 4096;
		let two_to_the[13] = 8192;
		let two_to_the[14] = 16384;
		let two_to_the[15] = 16384 + 16384;
		return;
    }
	
	function boolean bit(int x, int n){
		return ~((x & two_to_the[n]) = 0);
	}

    /** Returns the absolute value of x. */
    function int abs(int x){
		if(x < 0){
			let x = -x;
		}
		return x;
	}

    /** Returns the product of x and y. */
    function int multiply(int x, int y) {
        var int sum, shiftedX;
        var int j;
        
        let sum = 0;
        let shiftedX = x;
        let j = 0;
        while( j < 16 ) {   // 16-bit numbers
            if(Math.bit(y, j)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let j = j + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y. */
    function int divide(int x, int y){
		var boolean neg;
		if (y = 0){
			do Sys.error(3);
		}
		let neg = ~((x<0) = (y<0));
		if (y = (32767 + 1)) {
			if (x = y) {
				return 1;
			} 
			else {
			return 0;
			}
		}
		let x = Math.div(Math.abs(x), Math.abs(y));
		if (neg) {
			return -x;
		}
		return x;
    }
	
	function int div(int x, int y) {
		var int q, qy, xm1, ym1;
		let xm1 = x - 1;
		let ym1 = y - 1;
		if ( (ym1 < 0) | (ym1 > xm1) ) {
			return 0;
		}
		let q = Math.div(x, y+y);
		let qy = Math.multiply(q, y);
		if ((xm1 - (qy+qy)) < ym1) {
			return q + q;
		}
		else{
			return q+q+1;
		}
	}

	function int logTwo(int x) {
		var int power_two, index;
		if((x>16384)&((x<32767)|(x=32767))){
			return 15;
		}
		let power_two = 1;
		let index = 0;
		while (power_two < x) {
			let power_two = power_two + power_two;
			let index = index + 1;
		}
		return index;
	}
	
    function int power(int x, int y){  
        var int flag;  
        var int result;  
        let flag = y;  
        let result = 1;  
        if(y=0){  
            return 1;  
        }  
        while ( flag>0 ){  
            let result = Math.multiply(result,x);  
            let flag=flag-1;  
        }  
        return result;   
    }     
      
    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
		var int y, n, half_n, sum, j, power_j;
		let n = Math.logTwo(x);
		let half_n = Math.divide(n,2);
		
		if (x<0){
			return Sys.error(3);
		}
		let j = half_n;
		let y = 0;
		while (j > -1){
			let power_j = Math.power(2, j);
			let sum = y + power_j;
			let sum = Math.multiply(sum, sum);
			if (((sum < x) | (sum = x)) & (sum > 0)) {
				let y = y + power_j;
			}
			let j=j - 1;
		}
		return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
		if(a > b)
		{
			return a;
		}
		else
		{
			return b;
		}
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
		if(a > b){
			return b;
		}
		else{
			return a;
		}
		
    }
}
